// List of all separate kernels to be dispatched from CustomTerrain.cs
#pragma kernel RainAndControl
#pragma kernel FluxComputation
#pragma kernel FluxApply
#pragma kernel HydraulicErosion
#pragma kernel SedimentAdvection
#pragma kernel ThermalErosion
#pragma kernel ApplyThermalErosion
#pragma kernel TiltAngle

// Number of threads in each kernel
#define NUMTHREADS numthreads(8, 8, 1)

// Directional maps channel semantics
// It means that for textures with 4-directional data (like flux)
// value for the each direction stored in a separate channel
// For example, LEFT is stored in RED channel
#define LDIR(col) (col.r)
#define RDIR(col) (col.g)
#define TDIR(col) (col.b)
#define BDIR(col) (col.a)

// State channel semantics
#define TERRAIN_HEIGHT(col) (col.r)
#define WATER_HEIGHT(col) (col.g)
#define SEDIMENT(col) (col.b)
#define HARDNESS(col) (col.a)
#define FULL_HEIGHT(col) ((TERRAIN_HEIGHT(col) + WATER_HEIGHT(col)))
#define FULL_HEIGHT_AND_SEDIMENT(col) ((TERRAIN_HEIGHT(col) + WATER_HEIGHT(col) + SEDIMENT(col)))

// Velocity-map channel semantics
#define VELOCITY_X(col) (col.r)
#define VELOCITY_Y(col) (col.g)

// Sampling macro, just to simplify the code a bit
#define SAMPLE_WITH_OFFSET(tex, x, y) ((tex[id.xy + uint2(x, y)]))
#define CURRENT_SAMPLE(tex) (tex[id.xy])
#define LEFT_SAMPLE(tex) (SAMPLE_WITH_OFFSET(tex, -1, 0))
#define RIGHT_SAMPLE(tex) (SAMPLE_WITH_OFFSET(tex, 1, 0))
#define TOP_SAMPLE(tex) (SAMPLE_WITH_OFFSET(tex, 0, 1))
#define BOTTOM_SAMPLE(tex) (SAMPLE_WITH_OFFSET(tex, 0, -1))

#define SUM_COMPS(v) ((v.r + v.g + v.b + v.a))


/* ======== INPUTS ======== */

// ErosionParams (R - rainParameter, G - Hardness, B - Sediment Capasity) not to be updated
RWTexture2D<float4> ErosionParams;

// InputHeight (R - height) not to be updated
RWTexture2D<float4> InputHeight;

// Heightmap (R - height, G - water height, B - suspended sediment amount, R - Surface hardness)
RWTexture2D<float4> HeightMap;

// Velocity field (R - velocity x, G - velocity y)
RWTexture2D<float2> VelocityMap;

// Water Flux field (R - left, G - right, B - top, A - bottom)
RWTexture2D<float4> FluxMap;

// Terrain Flux field (R - left, G - right, B - top, A - bottom)
RWTexture2D<float4> TerrainFluxMap;

uint _InputMode;
float4 _InputControls;

// Fluid simulation properties
uint _Width;
uint _Height;
float _TimeDelta;
float _PipeArea;
float _Gravity;
float _PipeLength;
float2 _CellSize;
float _Evaporation;
float _RainRate;

// Hydraulic erosion properties
float _SedimentCapacity;
float _MaxErosionDepth;
float _SuspensionRate;
float _DepositionRate;
float _SedimentSofteningRate;

// Thermal erosion properties
float _ThermalErosionTimeScale;
float _ThermalErosionRate;
float _TalusAngleTangentCoeff;
float _TalusAngleTangentBias;

// Rain drops
float raindropStrength;
float raindropRadius;
float2 raindropLocation;

float4 SampleBilinear(RWTexture2D<float4> tex, float2 uv)
{
	const float2 uva = floor(uv);
	const float2 uvb = ceil(uv);

	const uint2 id00 = (uint2)uva;  // 0 0
	const uint2 id10 = uint2(uvb.x, uva.y); // 1 0
	const uint2 id01 = uint2(uva.x, uvb.y); // 0 1	
	const uint2 id11 = (uint2)uvb; // 1 1

	const float2 d = uv - uva;

	return
		tex[id00] * (1 - d.x) * (1 - d.y) +
		tex[id10] * d.x * (1 - d.y) +
		tex[id01] * (1 - d.x) * d.y +
		tex[id11] * d.x * d.y;
}


float rain(uint2 pos) {
	if (length(raindropLocation - pos) < raindropRadius) {
		return raindropStrength;
	}
	return 0;
}

/* Pass 1. Rain simulation and brush drawing */
[NUMTHREADS]
void RainAndControl(uint3 id : SV_DispatchThreadID)
{
	float4 currentState = CURRENT_SAMPLE(HeightMap);
	WATER_HEIGHT(currentState) += rain(id.xy);

	CURRENT_SAMPLE(HeightMap) = currentState;
}


/* Pass 2. Flux field computation */
[NUMTHREADS]
void FluxComputation(uint3 id : SV_DispatchThreadID)
{
	// Sample the heighmap (state map)
	float4 state = CURRENT_SAMPLE(HeightMap);
	float4 stateLeft = LEFT_SAMPLE(HeightMap);
	float4 stateRight = RIGHT_SAMPLE(HeightMap);
	float4 stateTop = TOP_SAMPLE(HeightMap);
	float4 stateBottom = BOTTOM_SAMPLE(HeightMap);
	
	float4 inputHeight = CURRENT_SAMPLE(InputHeight);
	float4 inputHeightLeft = LEFT_SAMPLE(InputHeight);
	float4 inputHeightRight = RIGHT_SAMPLE(InputHeight);
	float4 inputHeightTop = TOP_SAMPLE(InputHeight);
	float4 inputHeightBottom = BOTTOM_SAMPLE(InputHeight);


	float terrainHeight = TERRAIN_HEIGHT(state) + TERRAIN_HEIGHT(inputHeight);
	float waterHeight = WATER_HEIGHT(state);

	// Flow simulation using shallow-water model. Computation of the velocity field and water height changes.
	// Sample flux
	float4 outputFlux = CURRENT_SAMPLE(FluxMap);

	// Overall height difference in each direction
	float4 heightDifference = FULL_HEIGHT(state) + TERRAIN_HEIGHT(inputHeight) - float4(
		FULL_HEIGHT(stateLeft) + TERRAIN_HEIGHT(inputHeightLeft),
		FULL_HEIGHT(stateRight) + TERRAIN_HEIGHT(inputHeightRight),
		FULL_HEIGHT(stateTop) + TERRAIN_HEIGHT(inputHeightTop),
		FULL_HEIGHT(stateBottom) + TERRAIN_HEIGHT(inputHeightBottom));

	// Output flux	
	outputFlux = max(0, outputFlux + _TimeDelta * _Gravity * _PipeArea * heightDifference / _PipeLength);

	/*
		Rescale flux
		The total outflow should not exceed the total amount
		of the water in the given cell.If the calculated value is
		larger than the current amount in the given cell, then flux will
		be scaled down with an appropriate factor
	*/
	outputFlux *= min(1, waterHeight * _CellSize.x * _CellSize.y / (SUM_COMPS(outputFlux) * _TimeDelta));

	// Boundaries (uncomment thisif you want water to bounce of boundaries)						
	if (id.x == 0) LDIR(outputFlux) = 0;
	if (id.y == 0) BDIR(outputFlux) = 0;
	if (id.x == _Width - 1) RDIR(outputFlux) = 0;
	if (id.y == _Height - 1) TDIR(outputFlux) = 0;

	// Write new flux to the FluxMap
	CURRENT_SAMPLE(FluxMap) = max(0, outputFlux);
}


/* Pass 3. Applying fluxes to the actual cells and changing weter height */
[NUMTHREADS]
void FluxApply(uint3 id : SV_DispatchThreadID)
{
	float4 state = CURRENT_SAMPLE(HeightMap);
	const float4 outputFlux = CURRENT_SAMPLE(FluxMap);
	const float4 inputFlux = float4(
		RDIR(LEFT_SAMPLE(FluxMap)),
		LDIR(RIGHT_SAMPLE(FluxMap)),
		BDIR(TOP_SAMPLE(FluxMap)),
		TDIR(BOTTOM_SAMPLE(FluxMap)));
	const float waterHeightBefore = WATER_HEIGHT(state);

	// Water surface and velocity field update
	// volume is changing by amount on incoming fluid volume minus out
	const float volumeDelta = SUM_COMPS(inputFlux) - SUM_COMPS(outputFlux);

	// Then, we update the water height in the current (x, y) cell:
	WATER_HEIGHT(state) += _TimeDelta * volumeDelta / (_CellSize.x * _CellSize.y);

	// Write new state to the HeightMap
	CURRENT_SAMPLE(HeightMap) = state;

	// Compute new velocity from flux to the VelocityMap
	if (waterHeightBefore < 0.001 && WATER_HEIGHT(state) < 0.001) {
		CURRENT_SAMPLE(VelocityMap) = float2(0, 0);
	}
	else
	{
		/*
		What is in the paper
		CURRENT_SAMPLE(VelocityMap) = float2(
			(LDIR(inputFlux) - LDIR(outputFlux) + RDIR(outputFlux) - RDIR(inputFlux)),
			(BDIR(inputFlux) - BDIR(outputFlux) + TDIR(outputFlux) - TDIR(inputFlux)))
			/ (_CellSize.x * (2 * waterHeightBefore + _TimeDelta * volumeDelta / (_CellSize.x * _CellSize.y)));
		*/
		/*
		CURRENT_SAMPLE(VelocityMap) = 2* float2(
			(LDIR(inputFlux) - LDIR(outputFlux) + RDIR(outputFlux) - RDIR(inputFlux)),
			(BDIR(inputFlux) - BDIR(outputFlux) + TDIR(outputFlux) - TDIR(inputFlux)))
			/ (_CellSize.x * _TimeDelta);
		*/
		
		/*
		// Alternative from https://www.researchgate.net/publication/308824247_Fractal_Nature_-_Generating_Realistic_Terrains_for_Games#pf4
		*/
		CURRENT_SAMPLE(VelocityMap) = float2(
			(LDIR(inputFlux) - LDIR(outputFlux) + RDIR(outputFlux) - RDIR(inputFlux)),
			(BDIR(inputFlux) - BDIR(outputFlux) + TDIR(outputFlux) - TDIR(inputFlux)))
			/ (_CellSize.x);

		if (length(CURRENT_SAMPLE(VelocityMap)) * _TimeDelta > 0.5) {
			CURRENT_SAMPLE(VelocityMap) = 0.5 * float2(sign(CURRENT_SAMPLE(VelocityMap).x), sign(CURRENT_SAMPLE(VelocityMap).y));
		}
		//CURRENT_SAMPLE(VelocityMap) = float2(min(1, CURRENT_SAMPLE(VelocityMap).x), min(1, CURRENT_SAMPLE(VelocityMap).y));
	}
}

/* Pass 3.5 Calculating tilt angle */
[NUMTHREADS]
void TiltAngle(uint3 id : SV_DispatchThreadID)
{
	// https://math.stackexchange.com/questions/1044044/local-tilt-angle-based-on-height-field
	// Calculate this before the next step so we don't read and write from the same data
	// Save the values in a different grid - now using TerrainFluxMap
	const float4 state = CURRENT_SAMPLE(HeightMap);
	const float4 stateLeft = LEFT_SAMPLE(HeightMap);
	const float4 stateRight = RIGHT_SAMPLE(HeightMap);
	const float4 stateTop = TOP_SAMPLE(HeightMap);
	const float4 stateBottom = BOTTOM_SAMPLE(HeightMap);
	const float2 velocity = CURRENT_SAMPLE(VelocityMap);
	
	const float4 inputHeight = CURRENT_SAMPLE(InputHeight);
	const float4 inputHeightLeft = LEFT_SAMPLE(InputHeight);
	const float4 inputHeightRight = RIGHT_SAMPLE(InputHeight);
	const float4 inputHeightTop = TOP_SAMPLE(InputHeight);
	const float4 inputHeightBottom = BOTTOM_SAMPLE(InputHeight);

	// Calculate the delta in the direction of the water flow
	// Limit to 0 because it is the abs value we care about and we only want to pick up sediment if it is downhill
	// Multiply with height of the map to get good relative values
		/*
	float dx = min(1, max(0,
		(velocity.x > 0 ? 1 : 0)* (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateRight)) +
		(velocity.x < 0 ? 1 : 0) * (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateLeft))
	));

	float dy = min(1, max(0,
		(velocity.y > 0 ? 1 : 0)* (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateTop)) +
		(velocity.y < 0 ? 1 : 0) * (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateBottom))
	));
	*/

	/*
	float dx = 5 * (max(0, TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateRight)) + 
			   max(0, TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateLeft)));

	float dy = 5* (max(0, (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateTop))) +
			   max(0, (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateBottom))));

	// Fancy trigonometry
	float sinangle = min(1, max(0, (dx * dx + dy * dy) / sqrt(dx * dx + dy * dy + 1) ));
	TerrainFluxMap[id.xy] = float4(sinangle, TerrainFluxMap[id.xy].gba);

	*/
	/*
	float dx = 100 * (max(0, TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateRight)) +
		max(0, TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateLeft)));

	float dy = 100 * (max(0, (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateTop))) +
		max(0, (TERRAIN_HEIGHT(state) - TERRAIN_HEIGHT(stateBottom))));

	// Fancy trigonometry
	float sinangle = min(dx * dx + dy * dy, 1);
	TerrainFluxMap[id.xy] = float4(sinangle, TerrainFluxMap[id.xy].gba);
	*/


	/*
	Fancy calculation
	float3 normal = float3(1, 1, 1) * float3((TERRAIN_HEIGHT(stateRight) - TERRAIN_HEIGHT(stateLeft)) / 2, (TERRAIN_HEIGHT(stateBottom) - TERRAIN_HEIGHT(stateTop)) / 2, -1);
	float3 straightUp = float3(1, 1, 0);

	float sina = dot(straightUp, normal) / (length(straightUp) * length(normal));
	TerrainFluxMap[id.xy] = float4(abs(sina), TerrainFluxMap[id.xy].gba);
	*/

	/*
	Not too fancy calculation as in report
	*/
	const float dx = 50 * (max(0, (TERRAIN_HEIGHT(state) + TERRAIN_HEIGHT(inputHeight)) - (TERRAIN_HEIGHT(stateRight) + TERRAIN_HEIGHT(inputHeightRight))) +
		max(0, (TERRAIN_HEIGHT(state) + TERRAIN_HEIGHT(inputHeight)) - (TERRAIN_HEIGHT(stateLeft) + TERRAIN_HEIGHT(inputHeightLeft))));

	const float dy = 50 * (max(0, ((TERRAIN_HEIGHT(state) + TERRAIN_HEIGHT(inputHeight)) - (TERRAIN_HEIGHT(stateTop) + TERRAIN_HEIGHT(inputHeightTop)))) +
		max(0, ((TERRAIN_HEIGHT(state) + TERRAIN_HEIGHT(inputHeight)) - (TERRAIN_HEIGHT(stateBottom) + TERRAIN_HEIGHT(inputHeightBottom)))));
	
	const float3 v = float3(dx, dy, 1);
	const float3 u = float3(0, 0, 1);
	
	const float cosAngle = (dot(v, u)) / (length(v) * length(u));
	const float sinAngle = sqrt(1 - cosAngle * cosAngle);
	TerrainFluxMap[id.xy] = float4(sinAngle, TerrainFluxMap[id.xy].gba);

}

/* Pass 4. Terrain hydraulic erosion and deposition */
[NUMTHREADS]
void HydraulicErosion(uint3 id : SV_DispatchThreadID)
{
	// Sample the heighmap (state map)
	float4 state = CURRENT_SAMPLE(HeightMap);
	const float2 velocity = CURRENT_SAMPLE(VelocityMap);

	// Tilt angle computation
	// Might want a condition to this, if it is bigger than 0. If it is 0 it might be uphill
	// This min value should be able to be changed to a diffused value similar to the noise value in the other paper
	const float sinangle = max(0.001, TerrainFluxMap[id.xy].r);

	// float sedimentTransportCapacity = _SedimentCapacity * length(velocity) * WATER_HEIGHT(state);
	const float sedimentTransportCapacity = _SedimentCapacity * length(velocity) * sinangle;
	
	if (SEDIMENT(state) < sedimentTransportCapacity)
	{
		const float mod = _TimeDelta * _SuspensionRate * (sedimentTransportCapacity - SEDIMENT(state));
		TERRAIN_HEIGHT(state) -= mod;
		HARDNESS(state) = SEDIMENT(state) + mod;
	}
	else
	{
		const float mod = _TimeDelta * _DepositionRate * (SEDIMENT(state) - sedimentTransportCapacity);
		TERRAIN_HEIGHT(state) += mod;
		HARDNESS(state) = SEDIMENT(state) - mod;
	}
	// Water evaporation.
	WATER_HEIGHT(state) *= 1 - _Evaporation * _TimeDelta;

	// Write heighmap
	CURRENT_SAMPLE(HeightMap) = state;

	TerrainFluxMap[id.xy] = float4(TerrainFluxMap[id.xy].rgb, TerrainFluxMap[id.xy].b - TerrainFluxMap[id.xy].g);
}


/* Pass 5. Terrain hydraulic erosion second step. Advecting sediment */
[NUMTHREADS]
void SedimentAdvection(uint3 id : SV_DispatchThreadID)
{
	float4 state = CURRENT_SAMPLE(HeightMap);
	const float2 velocity = CURRENT_SAMPLE(VelocityMap);
	//velocity *= 0.1;
	// Sediment advection
	// What the paper describes that has mass loss
	SEDIMENT(state) = HARDNESS(SampleBilinear(HeightMap, id.xy - velocity * _TimeDelta));
	//SEDIMENT(state) = HARDNESS(state);

	// Write heightmap
	CURRENT_SAMPLE(HeightMap) = state;
}




/*
Not in use
*/

/* Pass 6. Terrain thermal erosion */
[NUMTHREADS]
void ThermalErosion(uint3 id : SV_DispatchThreadID)
{
	float4 state = CURRENT_SAMPLE(HeightMap);

	// Neighbors
	float4 neighborHeights = float4(
		TERRAIN_HEIGHT(LEFT_SAMPLE(HeightMap)),
		TERRAIN_HEIGHT(RIGHT_SAMPLE(HeightMap)),
		TERRAIN_HEIGHT(TOP_SAMPLE(HeightMap)),
		TERRAIN_HEIGHT(BOTTOM_SAMPLE(HeightMap))
		);

	// Overall height difference in each direction
	float4 heightDifference = max(0, TERRAIN_HEIGHT(state) - neighborHeights);
	float maxHeightDifference = max(max(heightDifference.x, heightDifference.y), max(heightDifference.z, heightDifference.w));

	// First, we need to compute the amount of terrain to be moved from the current cell
	// It is capped at [Area * MaxHeightDifference / 2] because it will oscillate if we will allow 
	// more mass to flow per update
	// ErosionRate and Hardness are just control variables to reduce the erosion where and when needed
	float volumeToBeMoved = _CellSize.x * _CellSize.y * maxHeightDifference * 0.5
		* _ThermalErosionRate * HARDNESS(state);

	// Compute angles for every neighbor
	// Actually a tan(angle)
	// NOTE: If Cellsize.X and _Cellsize.y are different 
	// you need to use .x for first 2 components and .y for last 2
	float4 tanAngle = heightDifference / _CellSize.x;

	// We need to define a threshold for the angle to identify in which direction the mass is falling
	// It based on hardness of the material and some more control variables
	float treshold = HARDNESS(state) * _TalusAngleTangentCoeff + _TalusAngleTangentBias;

	// Next we need to set proportions that defines how much mass is transfered in each direction
	// Some directions will not contribute because of not enough steep angles
	// We are 
	float4 k = 0;

	if (tanAngle.x > treshold)
		k.x = heightDifference.x;

	if (tanAngle.y > treshold)
		k.y = heightDifference.y;

	if (tanAngle.z > treshold)
		k.z = heightDifference.z;

	if (tanAngle.w > treshold)
		k.w = heightDifference.w;

	// Output flux
	float sumProportions = SUM_COMPS(k);
	float4 outputFlux = 0;

	if (sumProportions > 0)
		outputFlux = volumeToBeMoved * k / sumProportions;

	// Boundaries (uncomment thisif you want water to bounce of boundaries)						
	if (id.x == 0) LDIR(outputFlux) = 0;
	if (id.y == 0) BDIR(outputFlux) = 0;
	if (id.x == _Width - 1) RDIR(outputFlux) = 0;
	if (id.y == _Height - 1) TDIR(outputFlux) = 0;

	CURRENT_SAMPLE(TerrainFluxMap) = outputFlux;
}

/* Pass 7. Apply thermal erosion */
[NUMTHREADS]
void ApplyThermalErosion(uint3 id : SV_DispatchThreadID)
{
	float4 state = CURRENT_SAMPLE(HeightMap);
	float4 outputFlux = CURRENT_SAMPLE(TerrainFluxMap);
	float4 inputFlux = float4(
		RDIR(LEFT_SAMPLE(TerrainFluxMap)),
		LDIR(RIGHT_SAMPLE(TerrainFluxMap)),
		BDIR(TOP_SAMPLE(TerrainFluxMap)),
		TDIR(BOTTOM_SAMPLE(TerrainFluxMap)));

	// Volume is changing by amount on incoming mass minus outgoing mass
	float volumeDelta = SUM_COMPS(inputFlux) - SUM_COMPS(outputFlux);

	// Then, we update the terrain height in the current (x, y) cell
	// min - is to prevent addind more mass than in flux
	TERRAIN_HEIGHT(state) += min(1, _TimeDelta * _ThermalErosionTimeScale) * volumeDelta;

	// Write new state to the HeightMap
	CURRENT_SAMPLE(HeightMap) = state;
}